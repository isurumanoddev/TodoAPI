// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoAPI.DataAccess;

namespace TodoAPI.Migrations
{
    [DbContext(typeof(TodoDBContext))]
    [Migration("20221002060014_bb")]
    partial class bb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TodoAPI.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HomeNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Q",
                            HomeNumber = "1",
                            Job = "Devoloper",
                            Name = "isuru",
                            Street = "A"
                        },
                        new
                        {
                            Id = 2,
                            City = "H",
                            HomeNumber = "1",
                            Job = "Engineer",
                            Name = "Alex",
                            Street = "S"
                        },
                        new
                        {
                            Id = 3,
                            City = "W",
                            HomeNumber = "1",
                            Job = "Investor",
                            Name = "Ann",
                            Street = "D"
                        },
                        new
                        {
                            Id = 4,
                            City = "T",
                            HomeNumber = "1",
                            Job = "Designer",
                            Name = "Max",
                            Street = "F"
                        },
                        new
                        {
                            Id = 5,
                            City = "E",
                            HomeNumber = "1",
                            Job = "Devoloper",
                            Name = "tony",
                            Street = "G"
                        },
                        new
                        {
                            Id = 6,
                            City = "C",
                            HomeNumber = "1",
                            Job = "Investor",
                            Name = "liee",
                            Street = "H"
                        },
                        new
                        {
                            Id = 7,
                            City = "VC",
                            HomeNumber = "1",
                            Job = "Devoloper",
                            Name = "las",
                            Street = "K"
                        },
                        new
                        {
                            Id = 8,
                            City = "R",
                            HomeNumber = "1",
                            Job = "Investor",
                            Name = "Bee",
                            Street = "H"
                        },
                        new
                        {
                            Id = 9,
                            City = "C",
                            HomeNumber = "1",
                            Job = "Engineer",
                            Name = "mac",
                            Street = "Q"
                        });
                });

            modelBuilder.Entity("TodoAPI.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Created = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(1720),
                            Discription = "Drink 1 liter after workout",
                            Due = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(8825),
                            Status = 2,
                            Title = "Drink water"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Created = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9639),
                            Discription = "Drink 1 liter after workout",
                            Due = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9644),
                            Status = 2,
                            Title = "DMake Tea"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Created = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9646),
                            Discription = "Drink 1 liter after workout",
                            Due = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9647),
                            Status = 2,
                            Title = "Toilet"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Created = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9649),
                            Discription = "Drink 1 liter after workout",
                            Due = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9650),
                            Status = 2,
                            Title = "Brush Teeth"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            Created = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9651),
                            Discription = "Drink 1 liter after workout",
                            Due = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9652),
                            Status = 2,
                            Title = "Breakfast"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            Created = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9654),
                            Discription = "Drink 1 liter after workout",
                            Due = new DateTime(2022, 10, 2, 11, 30, 13, 954, DateTimeKind.Local).AddTicks(9655),
                            Status = 2,
                            Title = "Breakfast"
                        });
                });

            modelBuilder.Entity("TodoAPI.Models.Todo", b =>
                {
                    b.HasOne("TodoAPI.Models.Author", "Author")
                        .WithMany("Todos")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TodoAPI.Models.Author", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
